// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO "user" (
  "first_name",
  "last_name",
  "email",
  "is_email_verified",
  "password_hash",
  "pronouns",
  "is_candidate",
  "is_recruiter"
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, first_name, last_name, email, is_email_verified, password_hash, pronouns, is_candidate, is_recruiter
`

type CreateUserParams struct {
	FirstName       string   `json:"firstName"`
	LastName        string   `json:"lastName"`
	Email           string   `json:"email"`
	IsEmailVerified bool     `json:"isEmailVerified"`
	PasswordHash    string   `json:"passwordHash"`
	Pronouns        Pronouns `json:"pronouns"`
	IsCandidate     bool     `json:"isCandidate"`
	IsRecruiter     bool     `json:"isRecruiter"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.exec(ctx, q.createUserStmt, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.IsEmailVerified,
		arg.PasswordHash,
		arg.Pronouns,
		arg.IsCandidate,
		arg.IsRecruiter,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "user"
WHERE "id" = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, first_name, last_name, email, is_email_verified, password_hash, pronouns, is_candidate, is_recruiter FROM "user"
WHERE "id" = $1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsEmailVerified,
		&i.PasswordHash,
		&i.Pronouns,
		&i.IsCandidate,
		&i.IsRecruiter,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, first_name, last_name, email, is_email_verified, password_hash, pronouns, is_candidate, is_recruiter FROM "user"
ORDER BY "id"
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.query(ctx, q.listUsersStmt, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.IsEmailVerified,
			&i.PasswordHash,
			&i.Pronouns,
			&i.IsCandidate,
			&i.IsRecruiter,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE "user" SET (
  "first_name",
  "last_name",
  "email",
  "is_email_verified",
  "password_hash",
  "pronouns",
  "is_candidate",
  "is_recruiter"
) = (
    $1, $2, $3, $4, $5, $6, $7, $8
) WHERE "id" = $9
RETURNING id, first_name, last_name, email, is_email_verified, password_hash, pronouns, is_candidate, is_recruiter
`

type UpdateUserParams struct {
	FirstName       string    `json:"firstName"`
	LastName        string    `json:"lastName"`
	Email           string    `json:"email"`
	IsEmailVerified bool      `json:"isEmailVerified"`
	PasswordHash    string    `json:"passwordHash"`
	Pronouns        Pronouns  `json:"pronouns"`
	IsCandidate     bool      `json:"isCandidate"`
	IsRecruiter     bool      `json:"isRecruiter"`
	ID              uuid.UUID `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.exec(ctx, q.updateUserStmt, updateUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.IsEmailVerified,
		arg.PasswordHash,
		arg.Pronouns,
		arg.IsCandidate,
		arg.IsRecruiter,
		arg.ID,
	)
	return err
}
