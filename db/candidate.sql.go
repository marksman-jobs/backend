// Code generated by sqlc. DO NOT EDIT.
// source: candidate.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createCandidate = `-- name: CreateCandidate :exec
INSERT INTO "candidate" (
    "user_id",
    "resume_id"
) VALUES (
    $1, $2
)
RETURNING id, user_id, resume_id
`

type CreateCandidateParams struct {
	UserID   uuid.UUID      `json:"userID"`
	ResumeID sql.NullString `json:"resumeID"`
}

func (q *Queries) CreateCandidate(ctx context.Context, arg CreateCandidateParams) error {
	_, err := q.exec(ctx, q.createCandidateStmt, createCandidate, arg.UserID, arg.ResumeID)
	return err
}

const deleteCandidate = `-- name: DeleteCandidate :exec
DELETE FROM "candidate"
WHERE "id" = $1
`

func (q *Queries) DeleteCandidate(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteCandidateStmt, deleteCandidate, id)
	return err
}

const getCandidate = `-- name: GetCandidate :one
SELECT id, user_id, resume_id FROM "candidate"
WHERE "id" = $1
`

func (q *Queries) GetCandidate(ctx context.Context, id uuid.UUID) (Candidate, error) {
	row := q.queryRow(ctx, q.getCandidateStmt, getCandidate, id)
	var i Candidate
	err := row.Scan(&i.ID, &i.UserID, &i.ResumeID)
	return i, err
}

const listCandidates = `-- name: ListCandidates :many
SELECT id, user_id, resume_id FROM "candidate"
ORDER BY "id"
`

func (q *Queries) ListCandidates(ctx context.Context) ([]Candidate, error) {
	rows, err := q.query(ctx, q.listCandidatesStmt, listCandidates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Candidate
	for rows.Next() {
		var i Candidate
		if err := rows.Scan(&i.ID, &i.UserID, &i.ResumeID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCandidate = `-- name: UpdateCandidate :exec
UPDATE "candidate" SET (
    "resume_id"
) = (
    $1
) WHERE "id" = $2
RETURNING id, user_id, resume_id
`

func (q *Queries) UpdateCandidate(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.updateCandidateStmt, updateCandidate, id)
	return err
}
