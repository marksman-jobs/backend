// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createCandidateStmt, err = db.PrepareContext(ctx, createCandidate); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCandidate: %w", err)
	}
	if q.createCompanyStmt, err = db.PrepareContext(ctx, createCompany); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCompany: %w", err)
	}
	if q.createJobStmt, err = db.PrepareContext(ctx, createJob); err != nil {
		return nil, fmt.Errorf("error preparing query CreateJob: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteCandidateStmt, err = db.PrepareContext(ctx, deleteCandidate); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCandidate: %w", err)
	}
	if q.deleteCompanyStmt, err = db.PrepareContext(ctx, deleteCompany); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCompany: %w", err)
	}
	if q.deleteJobStmt, err = db.PrepareContext(ctx, deleteJob); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteJob: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.getCandidateStmt, err = db.PrepareContext(ctx, getCandidate); err != nil {
		return nil, fmt.Errorf("error preparing query GetCandidate: %w", err)
	}
	if q.getCompanyStmt, err = db.PrepareContext(ctx, getCompany); err != nil {
		return nil, fmt.Errorf("error preparing query GetCompany: %w", err)
	}
	if q.getJobStmt, err = db.PrepareContext(ctx, getJob); err != nil {
		return nil, fmt.Errorf("error preparing query GetJob: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.listCandidatesStmt, err = db.PrepareContext(ctx, listCandidates); err != nil {
		return nil, fmt.Errorf("error preparing query ListCandidates: %w", err)
	}
	if q.listCompaniesStmt, err = db.PrepareContext(ctx, listCompanies); err != nil {
		return nil, fmt.Errorf("error preparing query ListCompanies: %w", err)
	}
	if q.listJobsStmt, err = db.PrepareContext(ctx, listJobs); err != nil {
		return nil, fmt.Errorf("error preparing query ListJobs: %w", err)
	}
	if q.listUsersStmt, err = db.PrepareContext(ctx, listUsers); err != nil {
		return nil, fmt.Errorf("error preparing query ListUsers: %w", err)
	}
	if q.updateCandidateStmt, err = db.PrepareContext(ctx, updateCandidate); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCandidate: %w", err)
	}
	if q.updateCompanyStmt, err = db.PrepareContext(ctx, updateCompany); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCompany: %w", err)
	}
	if q.updateJobStmt, err = db.PrepareContext(ctx, updateJob); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateJob: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createCandidateStmt != nil {
		if cerr := q.createCandidateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCandidateStmt: %w", cerr)
		}
	}
	if q.createCompanyStmt != nil {
		if cerr := q.createCompanyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCompanyStmt: %w", cerr)
		}
	}
	if q.createJobStmt != nil {
		if cerr := q.createJobStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createJobStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteCandidateStmt != nil {
		if cerr := q.deleteCandidateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCandidateStmt: %w", cerr)
		}
	}
	if q.deleteCompanyStmt != nil {
		if cerr := q.deleteCompanyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCompanyStmt: %w", cerr)
		}
	}
	if q.deleteJobStmt != nil {
		if cerr := q.deleteJobStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteJobStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.getCandidateStmt != nil {
		if cerr := q.getCandidateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCandidateStmt: %w", cerr)
		}
	}
	if q.getCompanyStmt != nil {
		if cerr := q.getCompanyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCompanyStmt: %w", cerr)
		}
	}
	if q.getJobStmt != nil {
		if cerr := q.getJobStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getJobStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.listCandidatesStmt != nil {
		if cerr := q.listCandidatesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listCandidatesStmt: %w", cerr)
		}
	}
	if q.listCompaniesStmt != nil {
		if cerr := q.listCompaniesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listCompaniesStmt: %w", cerr)
		}
	}
	if q.listJobsStmt != nil {
		if cerr := q.listJobsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listJobsStmt: %w", cerr)
		}
	}
	if q.listUsersStmt != nil {
		if cerr := q.listUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUsersStmt: %w", cerr)
		}
	}
	if q.updateCandidateStmt != nil {
		if cerr := q.updateCandidateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCandidateStmt: %w", cerr)
		}
	}
	if q.updateCompanyStmt != nil {
		if cerr := q.updateCompanyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCompanyStmt: %w", cerr)
		}
	}
	if q.updateJobStmt != nil {
		if cerr := q.updateJobStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateJobStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                  DBTX
	tx                  *sql.Tx
	createCandidateStmt *sql.Stmt
	createCompanyStmt   *sql.Stmt
	createJobStmt       *sql.Stmt
	createUserStmt      *sql.Stmt
	deleteCandidateStmt *sql.Stmt
	deleteCompanyStmt   *sql.Stmt
	deleteJobStmt       *sql.Stmt
	deleteUserStmt      *sql.Stmt
	getCandidateStmt    *sql.Stmt
	getCompanyStmt      *sql.Stmt
	getJobStmt          *sql.Stmt
	getUserStmt         *sql.Stmt
	listCandidatesStmt  *sql.Stmt
	listCompaniesStmt   *sql.Stmt
	listJobsStmt        *sql.Stmt
	listUsersStmt       *sql.Stmt
	updateCandidateStmt *sql.Stmt
	updateCompanyStmt   *sql.Stmt
	updateJobStmt       *sql.Stmt
	updateUserStmt      *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                  tx,
		tx:                  tx,
		createCandidateStmt: q.createCandidateStmt,
		createCompanyStmt:   q.createCompanyStmt,
		createJobStmt:       q.createJobStmt,
		createUserStmt:      q.createUserStmt,
		deleteCandidateStmt: q.deleteCandidateStmt,
		deleteCompanyStmt:   q.deleteCompanyStmt,
		deleteJobStmt:       q.deleteJobStmt,
		deleteUserStmt:      q.deleteUserStmt,
		getCandidateStmt:    q.getCandidateStmt,
		getCompanyStmt:      q.getCompanyStmt,
		getJobStmt:          q.getJobStmt,
		getUserStmt:         q.getUserStmt,
		listCandidatesStmt:  q.listCandidatesStmt,
		listCompaniesStmt:   q.listCompaniesStmt,
		listJobsStmt:        q.listJobsStmt,
		listUsersStmt:       q.listUsersStmt,
		updateCandidateStmt: q.updateCandidateStmt,
		updateCompanyStmt:   q.updateCompanyStmt,
		updateJobStmt:       q.updateJobStmt,
		updateUserStmt:      q.updateUserStmt,
	}
}
