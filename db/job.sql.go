// Code generated by sqlc. DO NOT EDIT.
// source: job.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createJob = `-- name: CreateJob :exec
INSERT INTO "job" (
  "title",
  "type",
  "function",
  "currency",
  "value",
  "number_of_applicants",
  "company_id",
  "recruiter_id",
  "location_id"
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, title, type, function, currency, value, number_of_applicants, company_id, recruiter_id, location_id
`

type CreateJobParams struct {
	Title              string        `json:"title"`
	Type               JobType       `json:"type"`
	Function           JobFunction   `json:"function"`
	Currency           Currency      `json:"currency"`
	Value              int32         `json:"value"`
	NumberOfApplicants sql.NullInt32 `json:"numberOfApplicants"`
	CompanyID          uuid.NullUUID `json:"companyID"`
	RecruiterID        uuid.NullUUID `json:"recruiterID"`
	LocationID         uuid.UUID     `json:"locationID"`
}

func (q *Queries) CreateJob(ctx context.Context, arg CreateJobParams) error {
	_, err := q.exec(ctx, q.createJobStmt, createJob,
		arg.Title,
		arg.Type,
		arg.Function,
		arg.Currency,
		arg.Value,
		arg.NumberOfApplicants,
		arg.CompanyID,
		arg.RecruiterID,
		arg.LocationID,
	)
	return err
}

const deleteJob = `-- name: DeleteJob :exec
DELETE FROM "job"
WHERE "id" = $1
`

func (q *Queries) DeleteJob(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteJobStmt, deleteJob, id)
	return err
}

const getJob = `-- name: GetJob :one
SELECT id, title, type, function, currency, value, number_of_applicants, company_id, recruiter_id, location_id FROM "job"
WHERE "id" = $1
`

func (q *Queries) GetJob(ctx context.Context, id uuid.UUID) (Job, error) {
	row := q.queryRow(ctx, q.getJobStmt, getJob, id)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Type,
		&i.Function,
		&i.Currency,
		&i.Value,
		&i.NumberOfApplicants,
		&i.CompanyID,
		&i.RecruiterID,
		&i.LocationID,
	)
	return i, err
}

const listJobs = `-- name: ListJobs :many
SELECT id, title, type, function, currency, value, number_of_applicants, company_id, recruiter_id, location_id FROM "job"
ORDER BY "id"
`

func (q *Queries) ListJobs(ctx context.Context) ([]Job, error) {
	rows, err := q.query(ctx, q.listJobsStmt, listJobs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Job
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Type,
			&i.Function,
			&i.Currency,
			&i.Value,
			&i.NumberOfApplicants,
			&i.CompanyID,
			&i.RecruiterID,
			&i.LocationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateJob = `-- name: UpdateJob :exec
UPDATE "job" SET (
  "title",
  "type",
  "function",
  "currency",
  "value",
  "number_of_applicants",
  "company_id",
  "recruiter_id",
  "location_id"
) = (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) WHERE "company_id" = $10
RETURNING id, title, type, function, currency, value, number_of_applicants, company_id, recruiter_id, location_id
`

type UpdateJobParams struct {
	Title              string        `json:"title"`
	Type               JobType       `json:"type"`
	Function           JobFunction   `json:"function"`
	Currency           Currency      `json:"currency"`
	Value              int32         `json:"value"`
	NumberOfApplicants sql.NullInt32 `json:"numberOfApplicants"`
	CompanyID          uuid.NullUUID `json:"companyID"`
	RecruiterID        uuid.NullUUID `json:"recruiterID"`
	LocationID         uuid.UUID     `json:"locationID"`
	CompanyID_2        uuid.NullUUID `json:"companyID2"`
}

func (q *Queries) UpdateJob(ctx context.Context, arg UpdateJobParams) error {
	_, err := q.exec(ctx, q.updateJobStmt, updateJob,
		arg.Title,
		arg.Type,
		arg.Function,
		arg.Currency,
		arg.Value,
		arg.NumberOfApplicants,
		arg.CompanyID,
		arg.RecruiterID,
		arg.LocationID,
		arg.CompanyID_2,
	)
	return err
}
