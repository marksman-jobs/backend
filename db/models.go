// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"database/sql"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type Currency string

const (
	CurrencyUSD   Currency = "USD"
	CurrencyGBP   Currency = "GBP"
	CurrencyINR   Currency = "INR"
	CurrencyAED   Currency = "AED"
	CurrencyOther Currency = "Other"
)

func (e *Currency) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Currency(s)
	case string:
		*e = Currency(s)
	default:
		return fmt.Errorf("unsupported scan type for Currency: %T", src)
	}
	return nil
}

type EducationLevel string

const (
	EducationLevelHighSchool EducationLevel = "High School"
	EducationLevelBachelors  EducationLevel = "Bachelors"
	EducationLevelMasters    EducationLevel = "Masters"
	EducationLevelDoctorate  EducationLevel = "Doctorate"
)

func (e *EducationLevel) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EducationLevel(s)
	case string:
		*e = EducationLevel(s)
	default:
		return fmt.Errorf("unsupported scan type for EducationLevel: %T", src)
	}
	return nil
}

type JobFunction string

const (
	JobFunctionEngineering         JobFunction = "Engineering"
	JobFunctionSoftwareEngineering JobFunction = "Software Engineering"
	JobFunctionLegal               JobFunction = "Legal"
	JobFunctionParalegal           JobFunction = "Paralegal"
	JobFunctionMedical             JobFunction = "Medical"
	JobFunctionParamedical         JobFunction = "Paramedical"
	JobFunctionManagement          JobFunction = "Management"
	JobFunctionFinance             JobFunction = "Finance"
	JobFunctionAccounting          JobFunction = "Accounting"
	JobFunctionProduct             JobFunction = "Product"
	JobFunctionHumanResources      JobFunction = "Human Resources"
	JobFunctionOther               JobFunction = "Other"
)

func (e *JobFunction) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = JobFunction(s)
	case string:
		*e = JobFunction(s)
	default:
		return fmt.Errorf("unsupported scan type for JobFunction: %T", src)
	}
	return nil
}

type JobStatus string

const (
	JobStatusCurrent JobStatus = "Current"
	JobStatusDesired JobStatus = "Desired"
	JobStatusApplied JobStatus = "Applied"
)

func (e *JobStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = JobStatus(s)
	case string:
		*e = JobStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for JobStatus: %T", src)
	}
	return nil
}

type JobType string

const (
	JobTypeFullTime   JobType = "Full Time"
	JobTypePartTime   JobType = "Part Time"
	JobTypeContract   JobType = "Contract"
	JobTypeInternship JobType = "Internship"
	JobTypeConsultant JobType = "Consultant"
)

func (e *JobType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = JobType(s)
	case string:
		*e = JobType(s)
	default:
		return fmt.Errorf("unsupported scan type for JobType: %T", src)
	}
	return nil
}

type Proficiency string

const (
	ProficiencyBeginner     Proficiency = "Beginner"
	ProficiencyIntermediate Proficiency = "Intermediate"
	ProficiencyAdvanced     Proficiency = "Advanced"
	ProficiencyExpert       Proficiency = "Expert"
	ProficiencyLegend       Proficiency = "Legend"
)

func (e *Proficiency) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Proficiency(s)
	case string:
		*e = Proficiency(s)
	default:
		return fmt.Errorf("unsupported scan type for Proficiency: %T", src)
	}
	return nil
}

type Pronouns string

const (
	PronounsHeHim    Pronouns = "he/him"
	PronounsSheHer   Pronouns = "she/her"
	PronounsTheyThem Pronouns = "they/them"
	PronounsOther    Pronouns = "other"
)

func (e *Pronouns) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Pronouns(s)
	case string:
		*e = Pronouns(s)
	default:
		return fmt.Errorf("unsupported scan type for Pronouns: %T", src)
	}
	return nil
}

type Candidate struct {
	ID       uuid.UUID      `json:"id"`
	UserID   uuid.UUID      `json:"userID"`
	ResumeID sql.NullString `json:"resumeID"`
}

type CandidateCompany struct {
	ID             uuid.UUID    `json:"id"`
	CandidateID    uuid.UUID    `json:"candidateID"`
	CompanyID      uuid.UUID    `json:"companyID"`
	CurrentCompany bool         `json:"currentCompany"`
	Start          time.Time    `json:"start"`
	End            sql.NullTime `json:"end"`
}

type CandidateJob struct {
	ID          uuid.UUID `json:"id"`
	CandidateID uuid.UUID `json:"candidateID"`
	JobID       uuid.UUID `json:"jobID"`
	Status      JobStatus `json:"status"`
}

type CandidateLocation struct {
	ID              uuid.UUID `json:"id"`
	CandidateID     uuid.UUID `json:"candidateID"`
	LocationID      uuid.UUID `json:"locationID"`
	CurrentLocation bool      `json:"currentLocation"`
}

type CandidateSkill struct {
	ID          uuid.UUID `json:"id"`
	CandidateID uuid.UUID `json:"candidateID"`
	SkillID     uuid.UUID `json:"skillID"`
}

type Company struct {
	ID          uuid.UUID      `json:"id"`
	Description sql.NullString `json:"description"`
}

type CompanyLocation struct {
	ID         uuid.UUID `json:"id"`
	CompanyID  uuid.UUID `json:"companyID"`
	LocationID uuid.UUID `json:"locationID"`
}

type Education struct {
	ID     uuid.UUID      `json:"id"`
	School string         `json:"school"`
	Level  EducationLevel `json:"level"`
}

type Job struct {
	ID                 uuid.UUID     `json:"id"`
	Title              string        `json:"title"`
	Type               JobType       `json:"type"`
	Function           JobFunction   `json:"function"`
	Currency           Currency      `json:"currency"`
	Value              int32         `json:"value"`
	NumberOfApplicants sql.NullInt32 `json:"numberOfApplicants"`
	CompanyID          uuid.NullUUID `json:"companyID"`
	RecruiterID        uuid.NullUUID `json:"recruiterID"`
	LocationID         uuid.UUID     `json:"locationID"`
}

type Location struct {
	ID      uuid.UUID `json:"id"`
	Remote  bool      `json:"remote"`
	City    string    `json:"city"`
	State   string    `json:"state"`
	Country string    `json:"country"`
}

type Recruiter struct {
	ID        uuid.UUID `json:"id"`
	UserID    uuid.UUID `json:"userID"`
	CompanyID uuid.UUID `json:"companyID"`
}

type Skill struct {
	ID          uuid.UUID   `json:"id"`
	Title       string      `json:"title"`
	Proficiency Proficiency `json:"proficiency"`
}

type User struct {
	ID              uuid.UUID `json:"id"`
	FirstName       string    `json:"firstName"`
	LastName        string    `json:"lastName"`
	Email           string    `json:"email"`
	IsEmailVerified bool      `json:"isEmailVerified"`
	PasswordHash    string    `json:"passwordHash"`
	Pronouns        Pronouns  `json:"pronouns"`
	IsCandidate     bool      `json:"isCandidate"`
	IsRecruiter     bool      `json:"isRecruiter"`
}
